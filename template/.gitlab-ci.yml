stages:
  - build
  - release

build:
  stage: build
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - node_modules/
  except:
    - tags
  image: node:14-alpine
  script:
    - yarn install
    - yarn build

  artifacts:
    paths:
      - build

.git_setup:
  before_script:
    - apk add --no-cache bash git openssh-client curl
    - eval "$(ssh-agent -s)"
    - mkdir -p /root/.ssh
    - chmod 700 /root/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > /root/.ssh/config
    - echo "${SSH_PRIVATE_KEY}" >> /root/.ssh/id_rsa
    - chmod 0600 /root/.ssh/id_rsa
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin "git@gitlab.com:${CI_PROJECT_PATH}.git"

release:
  extends:
    .git_setup
  stage: release
  image: docker:latest
  services:
    - name: docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: 'overlay'
  only:
    - master
  script:
    - CURRENT_VERSION=`sed -n 's/.*\"version\"\:\s*\"\([0-9\.]*\)\",/\1/p' package.json`
    - set -- `echo $CURRENT_VERSION | sed -nr 's/([0-9]+)\.([0-9]+)\.([0-9]+)/\1 \2 \3/p'`
    - NEW_VERSION="$1.$(($2+1)).0"
    - |
      sed -i  "s/\"version\":.*/\"version\": \"${NEW_VERSION}\",/" package.json

    - echo "$DOCKER_REGISTRY_PASSWORD" | docker login "$DOCKER_REGISTRY_URL" -u "$DOCKER_REGISTRY_USER" --password-stdin
    - docker build --no-cache -f ./docker/Dockerfile --tag="$DOCKER_REGISTRY_URL/${CI_PROJECT_NAME}:${NEW_VERSION}" .
    - docker push "$DOCKER_REGISTRY_URL/${CI_PROJECT_NAME}:${NEW_VERSION}"

    - git commit -am "Update version to ${NEW_VERSION} [skip ci]"
    - git tag "${NEW_VERSION}"
    - git push origin "HEAD:$CI_COMMIT_BRANCH" --tags

    - >
      curl -X POST
      -F token=${DEPLOY_TRIGGER_TOKEN}
      -F ref=master
      -F variables[SERVICE_NAME]=${CI_PROJECT_NAME}
      -F variables[SERVICE_VERSION]=${NEW_VERSION}
      ${DEPLOY_TRIGGER_URL}
